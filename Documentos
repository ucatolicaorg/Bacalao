# Requisitos del Sistema â€“ Plataforma IGRIS

## 1. Requisitos Funcionales

### ğŸ“Œ MÃ³dulo de AutenticaciÃ³n
- Los estudiantes y profesores deben poder registrarse e iniciar sesiÃ³n con correo y contraseÃ±a.
- Implementar autenticaciÃ³n con OAuth (Google/Microsoft) como opciÃ³n alternativa.
- Los usuarios deben poder restablecer su contraseÃ±a mediante correo electrÃ³nico.
- El sistema debe generar y validar tokens JWT para sesiones seguras.

### ğŸ“Œ MÃ³dulo de GestiÃ³n de Competencias y Avances
- Los profesores pueden crear, modificar y eliminar competencias.
- Los estudiantes pueden visualizar competencias asignadas y registrar sus avances.
- El sistema debe otorgar puntos y medallas segÃºn el desempeÃ±o del estudiante.
- Se debe generar un grÃ¡fico de progreso que refleje la evoluciÃ³n del estudiante.

### ğŸ“Œ Banco de Ejercicios y Retos
- Cada competencia debe contar con un conjunto de ejercicios categorizados por dificultad (BÃ¡sico, Intermedio, Avanzado).
- Los ejercicios pueden ser de opciÃ³n mÃºltiple, cÃ³digo o respuesta abierta.
- Al responder, la plataforma debe proporcionar retroalimentaciÃ³n automÃ¡tica.
- El sistema debe almacenar el historial de respuestas y avances del usuario.

### ğŸ“Œ Sistema de Maratones y ClasificaciÃ³n
- Los estudiantes podrÃ¡n participar en maratones de programaciÃ³n semanales.
- Los profesores podrÃ¡n configurar maratones con tiempo lÃ­mite y lista de problemas.
- El sistema debe evaluar automÃ¡ticamente las respuestas y asignar puntuaciones.
- IntegraciÃ³n con API externas para obtener nuevos problemas de programaciÃ³n.

### ğŸ“Œ Sistema de Recompensas y GamificaciÃ³n
- ImplementaciÃ³n de medallas y rangos segÃºn el desempeÃ±o del usuario.
- Los estudiantes pueden desbloquear logros por participaciÃ³n y rendimiento.
- GeneraciÃ³n de tablas de clasificaciÃ³n y rankings segÃºn desempeÃ±o.
- Las recompensas deben motivar la constancia y el aprendizaje progresivo.

---

## 2. Requisitos No Funcionales

### ğŸ“Œ Usabilidad y DiseÃ±o
- La interfaz debe ser intuitiva, minimalista y accesible en dispositivos mÃ³viles y escritorio.
- AplicaciÃ³n de principios UX/UI para mejorar la experiencia del usuario.
- ImplementaciÃ³n de un sistema de notificaciones sobre avances y nuevos desafÃ­os.

### ğŸ“Œ DesempeÃ±o y Escalabilidad
- La plataforma debe manejar mÃºltiples usuarios simultÃ¡neamente sin afectar el rendimiento.
- OptimizaciÃ³n de consultas con Redis para mejorar tiempos de respuesta.
- Uso de WebSockets para actualizaciÃ³n en tiempo real en maratones y ranking.
- IntegraciÃ³n con Docker y Kubernetes para despliegue escalable.

### ğŸ“Œ Seguridad
- Cifrado de contraseÃ±as mediante bcrypt.
- ImplementaciÃ³n de JWT para autenticaciÃ³n segura.
- ProtecciÃ³n contra ataques de fuerza bruta y SQL Injection.
- Control de acceso basado en roles (estudiante, profesor, administrador).

### ğŸ“Œ Disponibilidad y Conectividad
- El sistema debe estar disponible 24/7 en la nube con un uptime del 99.9%.
- ImplementaciÃ³n de backups automÃ¡ticos para evitar pÃ©rdida de informaciÃ³n.
- IntegraciÃ³n con herramientas de monitoreo para detectar fallos y optimizar rendimiento.

---

## 3. Restricciones y Suposiciones
- Se asume que los problemas de programaciÃ³n pueden ser obtenidos de una API externa.
- El desarrollo del sistema utilizarÃ¡ **FastAPI (Backend), React.js (Frontend) y PostgreSQL (Base de Datos).**
- La clasificaciÃ³n en el ranking dependerÃ¡ de la cantidad de ejercicios y maratones completados.
- Los estudiantes y profesores solo pueden visualizar la informaciÃ³n relacionada con su rol y actividades asignadas.
